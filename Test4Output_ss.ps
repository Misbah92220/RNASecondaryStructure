%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.1
%%CreationDate: Mon Dec  5 15:05:06 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGCUUCAUAUAAUCCUAAUGAUAUGGUUUGGGAGUUUCUACCAAGAGCCUUAAACUCUUGAUUAUGAAGUG\
) def
/coor [
[100.00000000 100.00000000]
[115.00000000 100.00000000]
[128.51452637 106.50825500]
[137.86686707 118.23572540]
[141.20468140 132.85964966]
[137.86686707 147.48356628]
[128.51451111 159.21102905]
[114.99997711 165.71928406]
[99.99997711 165.71926880]
[86.48545074 159.21099854]
[77.13311768 147.48352051]
[73.79532623 132.85960388]
[58.85570908 134.20417786]
[52.96035004 120.41125488]
[38.50090027 124.40178680]
[23.74196053 121.72341156]
[11.60672092 112.90660858]
[4.49871349 99.69766235]
[3.82576942 84.71276855]
[9.72117329 70.91986084]
[-4.99605989 73.81866455]
[-19.19095802 68.97048187]
[-29.06000710 57.67438126]
[-31.95880318 42.95714569]
[-27.11061859 28.76224899]
[-15.81451988 18.89319992]
[-18.71332169 4.17596722]
[-30.15574074 -5.52305460]
[-29.70697021 -20.51634026]
[-17.70494461 -29.51363945]
[-26.40023041 -41.73624420]
[-25.20466995 -56.68852234]
[-14.67767906 -67.37414551]
[0.25504738 -68.79319000]
[12.60632324 -60.28166962]
[16.59685135 -45.82221985]
[10.35941410 -32.18058014]
[-3.18741703 -25.73982239]
[2.91360855 -12.03662968]
[-3.99605656 1.27714252]
[-1.09724498 15.99437332]
[13.09765816 20.84254074]
[22.96672249 32.13862610]
[25.86554146 46.85585403]
[21.01737213 61.05075455]
[35.47682190 57.06023026]
[38.15520477 42.30129242]
[52.91414261 44.97967911]
[50.23575592 59.73861694]
[62.37099075 68.55542755]
[69.47898865 81.76438141]
[78.59559631 69.85272980]
[93.23598480 66.58792114]
[106.54975128 73.49758911]
[115.66635895 61.58593369]
[130.54045105 63.52531433]
[136.29794312 77.37635040]
[127.18134308 89.28800964]
[112.30724335 87.34863281]
[107.81446075 101.65998840]
[95.17362976 109.73522186]
[80.29953003 107.79584503]
[70.15191650 96.74930573]
[64.25650787 110.54220581]
[77.13322449 118.23572540]
[86.48559570 106.50827026]
[71.59782410 104.67681885]
[60.06359100 95.08716583]
[55.54493332 80.78395844]
[59.47649002 66.30836487]
[70.61002350 56.25627899]
] def
/pairs [
[1 66]
[12 65]
[14 64]
[20 45]
[26 41]
[27 40]
[30 38]
[46 49]
[51 63]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
