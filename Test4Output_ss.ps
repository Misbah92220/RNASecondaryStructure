%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.1
%%CreationDate: Mon Dec  5 15:27:44 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGCUUCAUAUAAUCCUAAUGAUAUGGUUUGGGAGUUUCUACCAAGAGCCUUAAACUCUUGAUUAUGAAGUG\
) def
/coor [
[100.00000000 100.00000000]
[115.00000000 100.00000000]
[127.61880493 108.10961151]
[133.85003662 121.75408936]
[131.71531677 136.60140991]
[121.89241028 147.93765259]
[107.50001526 152.16363525]
[93.10762024 147.93765259]
[83.28470612 136.60140991]
[73.00757599 147.52755737]
[58.05748749 146.30491638]
[55.16865540 161.02410889]
[42.71789932 169.38943481]
[27.99870682 166.50059509]
[19.63337898 154.04983521]
[12.71468735 167.35891724]
[2.32664752 178.17967224]
[-10.68916225 185.63545227]
[-25.27827835 189.12223816]
[-40.25877380 188.35755920]
[-54.41701889 183.40336609]
[-66.60599518 174.66101074]
[-75.83822632 162.83874512]
[-81.36576843 148.89434814]
[-89.03298950 161.78674316]
[-90.79353333 176.68307495]
[-102.81385803 167.71023560]
[-117.44454956 164.40225220]
[-127.33663940 153.12632751]
[-128.71168518 138.18948364]
[-121.04447174 125.29708862]
[-107.26360321 119.37359619]
[-92.63290405 122.68157196]
[-82.74079895 133.95748901]
[-79.85196686 119.23829651]
[-94.83731842 119.90107727]
[-94.88831329 134.90098572]
[-103.04077911 147.49214172]
[-116.70636749 153.67694092]
[-131.54634094 151.49174500]
[-142.84912109 141.63035583]
[-147.02615356 127.22367859]
[-142.75126648 112.84573364]
[-131.38169861 103.06141663]
[-116.52720642 100.97718048]
[-102.90398407 107.25475311]
[-95.98531342 93.94566345]
[-80.99996185 93.28285980]
[-72.93328094 105.92915344]
[-62.54526520 95.10838318]
[-49.52947235 87.65257263]
[-34.94036484 84.16574097]
[-19.95986557 84.93038177]
[-5.80160522 89.88453674]
[6.38739967 98.62685394]
[15.61966896 110.44908905]
[24.93206024 98.68986511]
[39.77204514 100.87501526]
[45.29964447 114.81938934]
[35.98725891 126.57862091]
[21.14727402 124.39347839]
[22.52238846 139.33030701]
[34.97311020 130.96493530]
[49.69231415 133.85371399]
[54.21095276 119.55049896]
[68.21098328 114.16540527]
[81.15009308 121.75351715]
[87.38126373 108.10900879]
[72.50193024 106.21018219]
[62.32424545 95.19134521]
[61.61045456 80.20833588]
] def
/pairs [
[1 68]
[9 67]
[11 64]
[15 62]
[24 34]
[25 27]
[29 30]
[35 49]
[36 46]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
